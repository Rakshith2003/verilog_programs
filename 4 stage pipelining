//4 stage pipelining concept
/**1.read 2 16 16 bit number using rs1 and rs2 and store it in A and B
   2.Perform ALU operation A and B by "func" store in Z
   3.write the value of Z in register by rd
   4.Also using addr write the value of z in memory location**/
//using a registerbank,memory and ALU

module pipeline_4stage(zout,clk1,clk2,rd,rs2,rs1,addr);
input clk1,clk2;
input [3:0]rs1,rs2,rd;
input [3:0]func;
input [7:0]addr;
output [15:0]zout;
reg [15:0] regbank[0:15];
reg [15:0] mem[0:255];
reg [15:0]l12_a,l12_b,l23_z,l34_z;
reg [3:0] l12_rd,l23_rd,l12_func;
reg [7:0] l12_addr,l23_addr,l34_addr;

assign zout=l34_z;

always @(posedge clk1)   //stage 1
  begin
      l12_a<=#2 regbank[rs1];
      l12_b<=#2 regbank[rs2];
      l12_func<=#2 func;
      12_addr<=#2 addr;
      l12_rd<=#2 rd;
   end

always @(posedge clk2)    //stage 2
   begin 
       case(func)
       0: l23_z<= #2 l12_a + l12_b;
       1: l23_z<= #2 l12_a - l12_b;
       2: l23_z<= #2 l12_a * l12_b;
       3: l23_z<= #2 l12_a 
       4: l23_z<= #2 l12_b;
       5: l23_z<= #2 l12_a & l12_b;
       6: l23_z<= #2 l12_a | l12_b;
       7: l23_z<= #2 l12_a ^ l12_b;
       8: l23_z<= #2 ~l12_a;
       9: l23_z<= #2 ~l12_b;
      10: l23_z<= #2 l12_a >>1;
      11: l23_z<= #2 l12_a<<1;
      default:l23_z<= 16'hzzzz;
      endcase
     l23_rd<=#2 l12_rd;
     l23_addr<=#2 l12_addr;
  end

always @(posedge clk1)      //stage 3
   begin
    l34_addr<=#2 l23_addr;
    regbank[l23_rd]<=#2 l23_z;
    l34_z<=#2 l23_z;
   end

always @(posedge clk2)      //stage 4
  
   mem[l34_addr]<=#2 l34_z;

endmodule
